// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using companyApp.Server;

#nullable disable

namespace companyApp.Server.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("companyApp.Server.Models.Entities.AgentEntity", b =>
                {
                    b.Property<int>("AgentId")
                        .HasColumnType("integer")
                        .HasColumnName("agent_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("Priority")
                        .HasColumnType("boolean")
                        .HasColumnName("priority");

                    b.HasKey("AgentId");

                    b.ToTable("agent");
                });

            modelBuilder.Entity("companyApp.Server.Models.Entities.AgentViewEntity", b =>
                {
                    b.Property<int>("AgentId")
                        .HasColumnType("integer")
                        .HasColumnName("agent_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("full_name");

                    b.Property<long>("Inn")
                        .HasColumnType("bigint")
                        .HasColumnName("inn");

                    b.Property<int>("Kpp")
                        .HasColumnType("integer")
                        .HasColumnName("kpp");

                    b.Property<long>("Ogrn")
                        .HasColumnType("bigint")
                        .HasColumnName("ogrn");

                    b.Property<DateTime>("OgrnDateOfIssue")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ogrn_date_of_issue");

                    b.Property<bool>("Priority")
                        .HasColumnType("boolean")
                        .HasColumnName("priority");

                    b.Property<string>("RepEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rep_email");

                    b.Property<string>("RepFirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rep_first_name");

                    b.Property<string>("RepLastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rep_last_name");

                    b.Property<string>("RepPatronymic")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rep_patronymic");

                    b.Property<string>("RepPhone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rep_phone");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("short_name");

                    b.ToTable((string)null);

                    b.ToView("agent_view", (string)null);
                });

            modelBuilder.Entity("companyApp.Server.Models.Entities.BankAgentRelationEntity", b =>
                {
                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<int>("AgentId")
                        .HasColumnType("integer")
                        .HasColumnName("agent_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.HasKey("BankId", "AgentId");

                    b.HasIndex("AgentId");

                    b.ToTable("bank_agent_relation", (string)null);
                });

            modelBuilder.Entity("companyApp.Server.Models.Entities.BankEntity", b =>
                {
                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.HasKey("BankId");

                    b.ToTable("bank");
                });

            modelBuilder.Entity("companyApp.Server.Models.Entities.ClientEntity", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.HasKey("ClientId");

                    b.ToTable("client");
                });

            modelBuilder.Entity("companyApp.Server.Models.Entities.CompanyEntity", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("full_name");

                    b.Property<long>("Inn")
                        .HasColumnType("bigint")
                        .HasColumnName("inn");

                    b.Property<int>("Kpp")
                        .HasColumnType("integer")
                        .HasColumnName("kpp");

                    b.Property<long>("Ogrn")
                        .HasColumnType("bigint")
                        .HasColumnName("ogrn");

                    b.Property<DateTime>("OgrnDateOfIssue")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ogrn_date_of_issue");

                    b.Property<string>("RepEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rep_email");

                    b.Property<string>("RepFirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rep_first_name");

                    b.Property<string>("RepLastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rep_last_name");

                    b.Property<string>("RepPatronymic")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rep_patronymic");

                    b.Property<string>("RepPhone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rep_phone");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("short_name");

                    b.HasKey("CompanyId");

                    b.ToTable("company");
                });

            modelBuilder.Entity("companyApp.Server.Models.Entities.AgentEntity", b =>
                {
                    b.HasOne("companyApp.Server.Models.Entities.CompanyEntity", "Company")
                        .WithOne("Agent")
                        .HasForeignKey("companyApp.Server.Models.Entities.AgentEntity", "AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("companyApp.Server.Models.Entities.BankAgentRelationEntity", b =>
                {
                    b.HasOne("companyApp.Server.Models.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("companyApp.Server.Models.Entities.BankEntity", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("companyApp.Server.Models.Entities.BankEntity", b =>
                {
                    b.HasOne("companyApp.Server.Models.Entities.CompanyEntity", "Company")
                        .WithOne("Bank")
                        .HasForeignKey("companyApp.Server.Models.Entities.BankEntity", "BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("companyApp.Server.Models.Entities.ClientEntity", b =>
                {
                    b.HasOne("companyApp.Server.Models.Entities.CompanyEntity", "Company")
                        .WithOne("Client")
                        .HasForeignKey("companyApp.Server.Models.Entities.ClientEntity", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("companyApp.Server.Models.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Agent");

                    b.Navigation("Bank");

                    b.Navigation("Client");
                });
#pragma warning restore 612, 618
        }
    }
}
